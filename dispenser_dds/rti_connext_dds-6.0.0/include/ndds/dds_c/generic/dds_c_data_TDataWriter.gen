/* (c) Copyright 2003-2018, Real-Time Innovations, Inc. All rights reserved. */
/* $Id$

 (c) Copyright, Real-Time Innovations, 2004-2016.
 All rights reserved.
 No duplications, whole or partial, manual or electronic, may be made
 without express written permission.  Any such copies, or
 revisions thereof, must display this notice unaltered.
 This code contains trade secrets of Real-Time Innovations, Inc.

modification history
--------------------
1.0q,23apr12,rk  Made DDS_WriteParams_t non const in all the apis to make
                 it an inout param.
1.0q,12feb10,djs Added initialize option to create_data
1.0q,12jan10,tk  Merged from BRANCH_NDDS45A_NORTH12
                 - Added create/delete/lock/unlock methods
1.0q,22oct08,fcs Builtin type support
1.0q,19jul07,eh  Add as_reader/writer() that "widen" TDataReader/Writers
1.0h,12jan06,fcs Changed the implementation of the narrow
                 function in order to support data writers
                 defined inside a C++ namespace.
1.0g,26jul05,kaj Added API for FooDataWriter lookup_instance.
1.0g,14jul05,jml Bug #9595: provide type safety TDataWriter and
                 and TDataReader narrow methods
1.0e,01apr05,eys Fixed bug 9595. Added narrow method.
1.0d,27apr04,eys Added struct keyword
1.0d,14apr04,eys Added w_timestamp API
1.0d,05apr04,eys Bug #8143: copied here from dds/psm-cpp
===================================================================== */

#include <stdio.h>
#include <stdlib.h>

#include "dds_c/dds_c_common.h"
#include "dds_c/dds_c_topic.h"
#include "dds_c/dds_c_log_impl.h"

#ifndef dds_c_publication_impl_h
  #include "dds_c/dds_c_publication_impl.h"
#endif

#ifdef RTI_METP
  #include "metp/metp_dds.h"
#endif
/* ================================================================== */
/*i
   <<INTERFACE>>

   Defines:   TDataWriter_impl, TDataWriter, TData

   Organized using the well-documented "Generics Pattern" for
   implementing generics in C and C++.
*/

/* ================================================================== */
/*i
   <<IMPLEMENTATION>>

   Defines:   TDataWriter_impl TData
*/
#if defined(TDataWriter) && defined(TData)

/* ----------------------------------------------------------------- */
/* Defines submodule for logging purposes
 */
#define DDS_CURRENT_SUBMODULE  DDS_SUBMODULE_MASK_DATA

struct TDataWriter {
    DDS_DataWriter* _parent;
};

/*
 * Two step procedure needed for stringize the value of a macro
 */
#define _QUOTE(x) # x
#define QUOTE(x) _QUOTE(x)

#define concatenate(A, B)  A ## B

#ifdef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS
#define TDataWriter_create_data_c(TDataWriter) concatenate(TDataWriter, _create_data)
#define TDataWriter_create_data TDataWriter_create_data_c(TDataWriter)
#define TDataWriter_create_data_w_params_c(TDataWriter) concatenate(TDataWriter, _create_data_w_params)
#define TDataWriter_create_data_w_params TDataWriter_create_data_w_params_c(TDataWriter)

#define TData_create_data_w_params_c(TData) concatenate(TData, PluginSupport_create_data_w_params)
#define TData_create_data_w_params TData_create_data_w_params_c(TData)

#define TData_initialize_w_params_c(TData) concatenate(TData, _initialize_w_params)
#define TData_initialize_w_params TData_initialize_w_params_c(TData)

#define TData_finalize_w_params_c(TData) concatenate(TData, _finalize_w_params)
#define TData_finalize_w_params TData_finalize_w_params_c(TData)

#define TDataWriter_delete_data_c(TDataWriter) concatenate(TDataWriter, _delete_data)
#define TDataWriter_delete_data TDataWriter_delete_data_c(TDataWriter)
#define TDataWriter_delete_data_w_params_c(TDataWriter) concatenate(TDataWriter, _delete_data_w_params)
#define TDataWriter_delete_data_w_params TDataWriter_delete_data_w_params_c(TDataWriter)

#define TData_delete_data_w_params_c(TData) concatenate(TData, PluginSupport_destroy_data_w_params)
#define TData_delete_data_w_params TData_delete_data_w_params_c(TData)

#define TData_initialize_c(TData) concatenate(TData, _initialize)
#define TData_initialize TData_initialize_c(TData)

#define TDataWriter_get_loan_c(TDataWriter) concatenate(TDataWriter, _get_loan)
#define TDataWriter_get_loan TDataWriter_get_loan_c(TDataWriter)

#define TDataWriter_discard_loan_c(TDataWriter) concatenate(TDataWriter, _discard_loan)
#define TDataWriter_discard_loan TDataWriter_discard_loan_c(TDataWriter)

#endif /* #ifndef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS */

#define TDataWriter_narrow_c(TDataWriter) concatenate(TDataWriter, _narrow)
#define TDataWriter_narrow TDataWriter_narrow_c(TDataWriter)

#define TDataWriter_as_datawriter_c(TDataWriter) concatenate(TDataWriter, _as_datawriter)
#define TDataWriter_as_datawriter TDataWriter_as_datawriter_c(TDataWriter)

#define TDataWriter_register_instance_c(TDataWriter) concatenate(TDataWriter, _register_instance)
#define TDataWriter_register_instance TDataWriter_register_instance_c(TDataWriter)

#define TDataWriter_register_instance_w_timestamp_c(TDataWriter) concatenate(TDataWriter, _register_instance_w_timestamp)
#define TDataWriter_register_instance_w_timestamp TDataWriter_register_instance_w_timestamp_c(TDataWriter)

#define TDataWriter_register_instance_w_params_c(TDataWriter) concatenate(TDataWriter, _register_instance_w_params)
#define TDataWriter_register_instance_w_params TDataWriter_register_instance_w_params_c(TDataWriter)

#define TDataWriter_unregister_instance_c(TDataWriter) concatenate(TDataWriter, _unregister_instance)
#define TDataWriter_unregister_instance TDataWriter_unregister_instance_c(TDataWriter)

#define TDataWriter_unregister_instance_w_timestamp_c(TDataWriter) concatenate(TDataWriter, _unregister_instance_w_timestamp)
#define TDataWriter_unregister_instance_w_timestamp TDataWriter_unregister_instance_w_timestamp_c(TDataWriter)

#define TDataWriter_unregister_instance_w_params_c(TDataWriter) concatenate(TDataWriter, _unregister_instance_w_params)
#define TDataWriter_unregister_instance_w_params TDataWriter_unregister_instance_w_params_c(TDataWriter)

#define TDataWriter_write_c(TDataWriter) concatenate(TDataWriter, _write)
#define TDataWriter_write TDataWriter_write_c(TDataWriter)

#define TDataWriter_write_w_timestamp_c(TDataWriter) concatenate(TDataWriter, _write_w_timestamp)
#define TDataWriter_write_w_timestamp TDataWriter_write_w_timestamp_c(TDataWriter)

#define TDataWriter_write_w_params_c(TDataWriter) concatenate(TDataWriter, _write_w_params)
#define TDataWriter_write_w_params TDataWriter_write_w_params_c(TDataWriter)

#define TDataWriter_dispose_c(TDataWriter) concatenate(TDataWriter, _dispose)
#define TDataWriter_dispose TDataWriter_dispose_c(TDataWriter)

#define TDataWriter_dispose_w_timestamp_c(TDataWriter) concatenate(TDataWriter, _dispose_w_timestamp)
#define TDataWriter_dispose_w_timestamp TDataWriter_dispose_w_timestamp_c(TDataWriter)

#define TDataWriter_dispose_w_params_c(TDataWriter) concatenate(TDataWriter, _dispose_w_params)
#define TDataWriter_dispose_w_params TDataWriter_dispose_w_params_c(TDataWriter)

#define TDataWriter_get_key_value_c(TDataWriter) concatenate(TDataWriter, _get_key_value)
#define TDataWriter_get_key_value TDataWriter_get_key_value_c(TDataWriter)

#define TDataWriter_lookup_instance_c(TDataWriter) concatenate(TDataWriter, _lookup_instance)
#define TDataWriter_lookup_instance TDataWriter_lookup_instance_c(TDataWriter)

/* ---------------------------------------------------------------------
   Public Methods
   --------------------------------------------------------------------- */
#ifdef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS

TData* TDataWriter_create_data_w_params(
        TDataWriter* writer,
        const struct DDS_TypeAllocationParams_t* alloc_params) {
    const char *METHOD_NAME = RTI_FUNCTION_NAME;
    TData* foo = NULL;

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return NULL;
    }

    if (alloc_params == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "alloc_params");
        return NULL;
    }

    foo = TData_create_data_w_params(alloc_params);
    return (foo);
}

TData* TDataWriter_create_data(TDataWriter* writer) {
    const char *METHOD_NAME = RTI_FUNCTION_NAME;
    struct DDS_TypeAllocationParams_t alloc_params =
            DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return NULL;
    }
    return TDataWriter_create_data_w_params(writer, &alloc_params);
}

DDS_Boolean TDataWriter_delete_data_w_params(
        TDataWriter* writer,
        TData *sample,
        const struct DDS_TypeDeallocationParams_t* dealloc_params) {
    const char *METHOD_NAME = RTI_FUNCTION_NAME;

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return DDS_BOOLEAN_FALSE;
    }

    if (sample == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "sample");
        return DDS_BOOLEAN_FALSE;
    }

    if (dealloc_params == NULL) {
        DDSLog_exception(
                METHOD_NAME,
                &DDS_LOG_BAD_PARAMETER_s,
                "dealloc_params");
        return DDS_BOOLEAN_FALSE;
    }

    TData_delete_data_w_params(sample, dealloc_params);
    return DDS_BOOLEAN_TRUE;
}

DDS_Boolean TDataWriter_delete_data(TDataWriter* writer,TData *sample) {
    const char* METHOD_NAME = RTI_FUNCTION_NAME;
    struct DDS_TypeDeallocationParams_t dealloc_params
        = DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return DDS_BOOLEAN_FALSE;
    }

    if (sample == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "sample");
        return DDS_BOOLEAN_FALSE;
    }
    return TDataWriter_delete_data_w_params(writer, sample, &dealloc_params);
}

DDS_ReturnCode_t TDataWriter_get_loan(TDataWriter* writer, TData **foo) {
    const char *METHOD_NAME = RTI_FUNCTION_NAME;
#ifdef RTI_METP
    DDS_Boolean initialize_data = RTI_FALSE;
    DDS_ReturnCode_t retCode;

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return DDS_RETCODE_BAD_PARAMETER;
    }
    if (DDS_DataWriter_is_metp_writer((DDS_DataWriter *)writer)) {
        retCode = DDS_DataWriter_create_metp_data(
                (DDS_DataWriter *)writer,
                (void **)foo,
                &initialize_data);
        if (retCode != DDS_RETCODE_OK) {
            return retCode;
        }

        if ((*foo != NULL) && initialize_data) {
            TData_initialize(*foo);
        }
        return retCode;
    }
#endif
    RTIOsapiUtility_unusedParameter(writer);
    RTIOsapiUtility_unusedParameter(foo);
    DDSLog_exception(
            METHOD_NAME,
            &RTI_LOG_ANY_s,
            "get_loan() only supported for topic-types with transfer mode "
            "shmem-ref");
    return DDS_RETCODE_UNSUPPORTED;
}

DDS_ReturnCode_t TDataWriter_discard_loan(TDataWriter* writer, TData* sample) {
    const char *METHOD_NAME = RTI_FUNCTION_NAME;
#ifdef RTI_METP

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "writer");
        return DDS_RETCODE_BAD_PARAMETER;
    }

    if (sample == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s, "sample");
        return DDS_RETCODE_BAD_PARAMETER;
    }
    if (DDS_DataWriter_is_metp_writer((DDS_DataWriter *)writer)) {
        return DDS_DataWriter_delete_metp_data(
                (DDS_DataWriter *)writer,
                (void*)sample);
    }
#endif
    RTIOsapiUtility_unusedParameter(writer);
    RTIOsapiUtility_unusedParameter(sample);
    DDSLog_exception(
            METHOD_NAME,
            &RTI_LOG_ANY_s,
            "discard_loan() only supported for topic-types with transfer mode "
            "shmem-ref");
    return DDS_RETCODE_UNSUPPORTED;
}

#endif /* #ifndef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS */
/* --------------------------------------------------------------------- */

TDataWriter* TDataWriter_narrow(DDS_DataWriter* writer) {
    const char *METHOD_NAME = "TDataWriter_narrow";

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s,"null writer");
        return NULL;
    }

#ifndef TTYPENAME
    /* Compatibility with ndds.4.0g where TTYPENAME is not defined
       for the data writer */
    if (!DDS_DataWriter_compare_typeI(writer,QUOTE(TData))) {
#else
    /* This solution allows to work with DataWriters defined inside C++ namespaces
       where TData doesn't match with the TYPENAME asssigned by nddsgen */
    if (!DDS_DataWriter_compare_typeI(writer,TTYPENAME)) {
#endif

        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s,
                         "wrong type writer");
        return NULL;
    }

    return (TDataWriter *)writer;
}

DDS_DataWriter* TDataWriter_as_datawriter(TDataWriter* writer) {
    const char *METHOD_NAME = "TDataWriter_as_datawriter";

    if (writer == NULL) {
        DDSLog_exception(METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s,"null writer");
        return NULL;
    }

    return (DDS_DataWriter *)writer;
}


DDS_InstanceHandle_t TDataWriter_register_instance(
    TDataWriter* self,
    const TData* instance_data) {

    return DDS_DataWriter_register_instance_untypedI(
        (DDS_DataWriter *)self,
        instance_data);
}

DDS_InstanceHandle_t TDataWriter_register_instance_w_timestamp(
    TDataWriter* self,
    const TData* instance_data,
    const struct DDS_Time_t* source_timestamp) {

    return DDS_DataWriter_register_instance_w_timestamp_untypedI(
        (DDS_DataWriter *)self,
        instance_data,
        source_timestamp);
}

DDS_InstanceHandle_t TDataWriter_register_instance_w_params(
    TDataWriter* self,
    const TData* instance_data,
    struct DDS_WriteParams_t* params) {

    return DDS_DataWriter_register_instance_w_params_untypedI(
        (DDS_DataWriter *)self, instance_data, params);
}

DDS_ReturnCode_t TDataWriter_unregister_instance(
    TDataWriter*  self,
    const TData* instance_data, const DDS_InstanceHandle_t* handle) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_unregister_instance_untypedI(
                (DDS_DataWriter *)self, instance_data, handle);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                    (DDS_DataWriter *)self,
                    (void*)instance_data);
        }
        return retCode;
    } else {
#endif
        return DDS_DataWriter_unregister_instance_untypedI(
                (DDS_DataWriter *)self, instance_data, handle);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_unregister_instance_w_timestamp(
    TDataWriter* self,
    const TData* instance_data, const DDS_InstanceHandle_t* handle,
    const struct DDS_Time_t* source_timestamp) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_unregister_instance_w_timestamp_untypedI(
                (DDS_DataWriter *)self, instance_data, handle, source_timestamp);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                    (DDS_DataWriter *)self,
                    (void*)instance_data);
        }
        return retCode;
    } else {
#endif
    return DDS_DataWriter_unregister_instance_w_timestamp_untypedI(
        (DDS_DataWriter *)self, instance_data, handle, source_timestamp);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_unregister_instance_w_params(
    TDataWriter* self,
    const TData* instance_data,
    struct DDS_WriteParams_t* params) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_unregister_instance_w_params_untypedI(
                (DDS_DataWriter *)self, instance_data, params);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                    (DDS_DataWriter *)self,
                    (void*)instance_data);
        }
        return retCode;
    } else {
#endif
    return DDS_DataWriter_unregister_instance_w_params_untypedI(
        (DDS_DataWriter *)self, instance_data, params);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_write(
    TDataWriter* self,
    const TData* instance_data,
    const DDS_InstanceHandle_t* handle) {

#ifdef RTI_METP
    DDS_ReturnCode_t retcode;
    struct DDS_WriteParams_t w_params = DDS_WRITEPARAMS_DEFAULT;

    if (DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        retcode = DDS_DataWriter_write_metp_data(
                (DDS_DataWriter *)self,
                (const void*)instance_data,
                handle,
                &w_params);
        DDS_WriteParams_t_finalize(&w_params);
        return retcode;
    }
#endif
    return DDS_DataWriter_write_untypedI(
            (DDS_DataWriter *)self,
            instance_data,
            handle);
}

DDS_ReturnCode_t TDataWriter_write_w_timestamp(
    TDataWriter* self,
    const TData* instance_data, const DDS_InstanceHandle_t* handle,
    const struct DDS_Time_t* source_timestamp) {

#ifdef RTI_METP
    DDS_ReturnCode_t retcode;
    struct DDS_WriteParams_t w_params = DDS_WRITEPARAMS_DEFAULT;

    if (DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        w_params.source_timestamp.sec = source_timestamp->sec;
        w_params.source_timestamp.nanosec = source_timestamp->nanosec;
        retcode = DDS_DataWriter_write_metp_data(
                (DDS_DataWriter *)self,
                (const void*)instance_data,
                handle,
                &w_params);
        DDS_WriteParams_t_finalize(&w_params);
        return retcode;
    }
#endif
    return DDS_DataWriter_write_w_timestamp_untypedI(
            (DDS_DataWriter *)self,
            instance_data, handle, source_timestamp);
}

DDS_ReturnCode_t TDataWriter_write_w_params(
    TDataWriter* self,
    const TData* instance_data,
    struct DDS_WriteParams_t* params) {

#ifdef RTI_METP
    const char *METHOD_NAME = "TDataWriter_write_w_params";
    DDS_ReturnCode_t retcode;
    struct DDS_Cookie_t default_cookie = DDS_COOKIE_DEFAULT;

    if (DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        if (!DDS_Cookie_equals(&params->cookie, &default_cookie)) {
            DDSLog_exception(
                    METHOD_NAME, &DDS_LOG_BAD_PARAMETER_s,
                    "Cookie set in write params");
            return DDS_RETCODE_ILLEGAL_OPERATION;
        }
        retcode = DDS_DataWriter_write_metp_data(
                (DDS_DataWriter *)self,
                (const void*)instance_data,
                &params->handle,
                params);
        DDS_Cookie_t_finalize(&params->cookie);
        return retcode;
    }
#endif
    return DDS_DataWriter_write_w_params_untypedI(
        (DDS_DataWriter *)self,
        instance_data,
        params);
}

DDS_ReturnCode_t TDataWriter_dispose(
    TDataWriter* self,
    const TData* instance_data,
    const DDS_InstanceHandle_t* instance_handle) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_dispose_untypedI((DDS_DataWriter *)self,
                instance_data, instance_handle);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                            (DDS_DataWriter *)self,
                            (void*)instance_data);
        }
        return retCode;
    } else {
#endif

    return DDS_DataWriter_dispose_untypedI((DDS_DataWriter *)self,
                                       instance_data, instance_handle);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_dispose_w_timestamp(
    TDataWriter* self,
    const TData* instance_data, const DDS_InstanceHandle_t* instance_handle,
    const struct DDS_Time_t* source_timestamp) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_dispose_w_timestamp_untypedI(
            (DDS_DataWriter *)self, instance_data, instance_handle,
            source_timestamp);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                            (DDS_DataWriter *)self,
                            (void*)instance_data);
        }
        return retCode;
    } else {
#endif
    return DDS_DataWriter_dispose_w_timestamp_untypedI((DDS_DataWriter *)self,
            instance_data, instance_handle, source_timestamp);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_dispose_w_params(
    TDataWriter* self,
    const TData* instance_data,
    struct DDS_WriteParams_t* params) {
#ifdef RTI_METP
    if (instance_data && DDS_DataWriter_is_metp_writer((DDS_DataWriter *)self)) {
        DDS_ReturnCode_t retCode = DDS_DataWriter_dispose_w_params_untypedI(
            (DDS_DataWriter *)self,
            instance_data, params);
        if (retCode == DDS_RETCODE_OK) {
            DDS_DataWriter_delete_metp_data(
                            (DDS_DataWriter *)self,
                            (void*)instance_data);
        }
        return retCode;
    } else {
#endif
    return DDS_DataWriter_dispose_w_params_untypedI(
        (DDS_DataWriter *)self, instance_data, params);
#ifdef RTI_METP
    }
#endif
}

DDS_ReturnCode_t TDataWriter_get_key_value(
    TDataWriter* self,
    TData* key_holder,
    const DDS_InstanceHandle_t* handle)  {

    return DDS_DataWriter_get_key_value_untypedI((DDS_DataWriter *)self,
                                                 key_holder, handle);
}

DDS_InstanceHandle_t TDataWriter_lookup_instance(
    TDataWriter* self,
    const TData* key_holder) {

    return DDS_DataWriter_lookup_instance_untypedI(
        (DDS_DataWriter *)self, key_holder);
}

#undef concatenate

#undef TDataWriter_narrow_c
#undef TDataWriter_narrow

#undef TDataWriter_as_datawriter_c
#undef TDataWriter_as_datawriter

#undef TDataWriter_register_instance_c
#undef TDataWriter_register_instance

#undef TDataWriter_register_instance_w_timestamp_c
#undef TDataWriter_register_instance_w_timestamp

#undef TDataWriter_unregister_instance_c
#undef TDataWriter_unregister_instance

#undef TDataWriter_unregister_instance_w_timestamp_c
#undef TDataWriter_unregister_instance_w_timestamp

#undef TDataWriter_write_c
#undef TDataWriter_write

#undef TDataWriter_write_w_timestamp_c
#undef TDataWriter_write_w_timestamp

#undef TDataWriter_write_w_params_c
#undef TDataWriter_write_w_params

#undef TDataWriter_dispose_c
#undef TDataWriter_dispose

#undef TDataWriter_dispose_w_timestamp_c
#undef TDataWriter_dispose_w_timestamp

#undef TDataWriter_dispose_w_params_c
#undef TDataWriter_dispose_w_params

#undef TDataWriter_get_key_value_c
#undef TDataWriter_get_key_value

#undef TDataWriter_lookup_instance_c
#undef TDataWriter_lookup_instance

#ifdef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS
#undef TDataWriter_create_data_c
#undef TDataWriter_create_data
#undef TDataWriter_create_data_w_params_c
#undef TDataWriter_create_data_w_params

#undef TData_create_data_w_params_c
#undef TData_create_data_w_params

#undef TData_initialize_w_params_c
#undef TData_initialize_w_params

#undef TDataWriter_delete_data_c
#undef TDataWriter_delete_data
#undef TDataWriter_delete_data_w_params_c
#undef TDataWriter_delete_data_w_params

#undef TData_delete_data_w_params_c
#undef TData_delete_data_w_params

#undef TData_initialize_c
#undef TData_initialize

#undef TDataWriter_get_loan_c
#undef TDataWriter_get_loan

#undef TDataWriter_discard_loan_c
#undef TDataWriter_discard_loan
#endif /* #ifndef ENABLE_TDATAWRITER_DATA_CONSTRUCTOR_METHODS */

#undef DDS_CURRENT_SUBMODULE
#endif /* defined(TDataWriter) && defined(TData) */


/* End $Id$ */
