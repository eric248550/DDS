/* (c) Copyright 2003-2018, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_trust_plugins.h    generated by: makeheader    Thu Feb 28 22:12:56 2019
 *
 *		built from:	trust_plugins.ifc
 */

#ifndef dds_c_trust_plugins_h
#define dds_c_trust_plugins_h


  #ifndef mig_rtpsTrust_h
    #include "mig/mig_rtpsTrust.h"
  #endif
  #ifndef reda_inlineList_h
    #include "reda/reda_inlineList.h"
  #endif
  #ifndef dds_c_infrastructure_h
    #include "dds_c/dds_c_infrastructure.h"
  #endif
  #ifndef dds_c_domain_h
    #include "dds_c/dds_c_domain.h"
  #endif
  #ifndef dds_c_publication_h
    #include "dds_c/dds_c_publication.h"
  #endif
  #ifndef dds_c_subscription_h
    #include "dds_c/dds_c_subscription.h"
  #endif
  #ifndef dds_c_builtin_h
    #include "dds_c/dds_c_builtin.h"
  #endif
  #ifdef __cplusplus
    extern "C" {
  #endif

  #define RTI_TRUST_PLUGIN_PROPERTY_PREFIX "com.rti.serv."
  #define DDS_TRUST_PLUGIN_PROPERTY_PREFIX "dds.sec."

typedef struct DDS_TrustException {
    char *message;
    DDS_Long code;
    DDS_Long minor_code;
} DDS_TrustException;

typedef DDS_TrustException DDS_InterceptorException;


#define DDS_TRUST_EXCEPTION_INITIALIZER {NULL, 0, 0}

struct DDS_InterceptorPlugin;

typedef PRESParticipantAuthenticationValidationResult
    DDS_ValidationResult_t;


#define DDS_VALIDATION_OK PRES_VALIDATION_OK
#define DDS_VALIDATION_FAILED PRES_VALIDATION_FAILED
#define DDS_VALIDATION_PENDING_RETRY PRES_VALIDATION_PENDING_RETRY
#define DDS_VALIDATION_PENDING_HANDSHAKE_REQUEST PRES_VALIDATION_PENDING_HANDSHAKE_REQUEST
#define DDS_VALIDATION_PENDING_HANDSHAKE_MESSAGE PRES_VALIDATION_PENDING_HANDSHAKE_MESSAGE
#define DDS_VALIDATION_OK_FINAL_MESSAGE PRES_VALIDATION_OK_FINAL_MESSAGE
/*
 * DEPRECATED: You should use DDS_VALIDATION_OK_FINAL_MESSAGE instead.
 * Future versions of Connext DDS will remove this definition.
 */
#define DDS_VALIDATION_FINAL_MESSAGE PRES_VALIDATION_OK_FINAL_MESSAGE

typedef void * DDS_Handle;

typedef DDS_Handle DDS_ParticipantInterceptorHandle;

typedef DDS_Handle DDS_IdentityHandle;

typedef DDS_Handle DDS_HandshakeHandle;

typedef DDS_Handle DDS_PermissionsHandle;

typedef DDS_Handle DDS_SharedSecretHandle;

typedef DDS_Handle DDS_DataWriterInterceptorHandle;

typedef DDS_Handle DDS_DataReaderInterceptorHandle;

typedef struct DDS_DataHolder DDS_Token;

typedef DDS_Token DDS_MessageToken;

typedef DDS_Token DDS_IdentityToken;

typedef DDS_Token DDS_AuthenticatedPeerCredentialToken;

typedef DDS_Token DDS_PermissionsToken;

typedef DDS_Token DDS_PermissionsCredentialToken;

typedef DDS_MessageToken DDS_AuthRequestMessageToken;

typedef DDS_MessageToken DDS_HandshakeMessageToken;


#define DDS_Token_INITIALIZER { \
    "", \
    DDS_SEQUENCE_INITIALIZER, \
    DDS_SEQUENCE_INITIALIZER \
}

 extern DDSCDllVariable const DDS_Token DDS_TOKEN_NIL;

typedef enum {
    DDS_TrustedSubmessage_INVALID = 0,
    DDS_TrustedSubmessage_INFO_SUBMESSAGE = 1,
    DDS_TrustedSubmessage_DATAWRITER_SUBMESSAGE = 2,
    DDS_TrustedSubmessage_DATAREADER_SUBMESSAGE = 3
} DDS_TrustedSubmessageCategory_t;

typedef DDS_TrustedSubmessageCategory_t
    DDS_InterceptorSubmessageCategory_t;

struct DDS_Buffer {
    int length;
    char *pointer;
};


#define DDS_BUFFER_INVALID {0, NULL}

typedef struct REDAInlineList DDS_InlineList;

typedef struct REDAInlineListNode DDS_InlineListNode;


#define DDS_InlineList_init REDAInlineList_init
#define DDS_InlineList_getSize REDAInlineList_getSize
#define DDS_InlineList_getFirst REDAInlineList_getFirst
#define DDS_InlineList_addNodeToFront REDAInlineList_addNodeToFrontEA
#define DDS_InlineList_addNodeToBack REDAInlineList_addNodeToBackEA
#define DDS_InlineList_removeNode REDAInlineList_removeNodeEA
#define DDS_InlineListNode_init REDAInlineListNode_init

typedef PRESSampleHash DDS_SampleHash;


#define DDS_SAMPLE_HASH_NIL PRES_SAMPLE_HASH_NIL

extern DDSCDllExport
DDS_Boolean DDS_SampleHash_is_valid(const DDS_SampleHash *self);

typedef struct DDS_TrustedState {
    DDS_UnsignedLongLong participant_discovery_data_epoch;
    DDS_UnsignedLong participant_discovery_data_nonce;
    DDS_SampleHash participant_discovery_data_hash;
} DDS_TrustedState;


#define DDS_TRUSTED_STATE_INVALID PRES_TRUSTED_STATE_INVALID

typedef struct {
    struct DDS_VendorId_t rtps_vendor_id;
    struct DDS_ProductVersion_t product_version;
} DDS_TrustedParticipantInfo;


#define DDS_TRUSTED_PARTICIPANT_INFO_INVALID { \
    DDS_VENDORID_UNKNOWN, \
    DDS_PRODUCTVERSION_UNKNOWN \
}

typedef enum {
    DDS_NONE_PROTECTION_KIND,
    DDS_SIGN_PROTECTION_KIND,
    DDS_TRANSFORM_PROTECTION_KIND
} DDS_ProtectionKind;

typedef DDS_UnsignedLong DDS_PluginParticipantTrustAttributesMask;

typedef DDS_UnsignedLong DDS_PluginEndpointTrustAttributesMask;

typedef struct DDS_ParticipantTrustAttributes {
    DDS_Boolean allow_unauthenticated_participants;
    DDS_Boolean is_access_protected;
    DDS_Boolean is_rtps_protected;
    DDS_Boolean is_discovery_protected;
    DDS_Boolean is_liveliness_protected;
    DDS_PluginParticipantTrustAttributesMask plugin_participant_attributes;
    struct DDS_PropertySeq ac_participant_properties;
} DDS_ParticipantTrustAttributes;


#define DDS_PLUGIN_PARTICIPANT_TRUST_ATTRIBUTES_MASK_DEFAULT 0
#define DDS_PLUGIN_PARTICIPANT_TRUST_ATTRIBUTES_FLAG_IS_VALID (0x00000001 << 31)

#define DDS_PARTICIPANT_TRUST_ATTRIBUTES_DEFAULT \
{ \
    DDS_BOOLEAN_FALSE, /* allow_unauthenticated_participants */ \
    DDS_BOOLEAN_FALSE, /* is_access_protected */ \
    DDS_BOOLEAN_FALSE, /* is_rtps_protected */ \
    DDS_BOOLEAN_FALSE, /* is_discovery_protected */ \
    DDS_BOOLEAN_FALSE, /* is_liveliness_protected */ \
    DDS_PLUGIN_PARTICIPANT_TRUST_ATTRIBUTES_MASK_DEFAULT, \
    PRES_DDS_SEQUENCE_INVALID /* ac_participant_properties */ \
}

typedef struct DDS_TopicTrustAttributes {
    DDS_Boolean is_read_protected;
    DDS_Boolean is_write_protected;
    DDS_Boolean is_discovery_protected;
    DDS_Boolean is_liveliness_protected;
} DDS_TopicTrustAttributes;


#define DDS_TOPIC_TRUST_ATTRIBUTES_DEFAULT \
{ \
    DDS_BOOLEAN_FALSE, /* is_read_protected */ \
    DDS_BOOLEAN_FALSE, /* is_write_protected */ \
    DDS_BOOLEAN_FALSE, /* is_discovery_protected */ \
    DDS_BOOLEAN_FALSE  /* is_liveliness_protected */ \
}

typedef struct DDS_EndpointTrustAttributes {
    DDS_TopicTrustAttributes parent;
    DDS_Boolean is_submessage_protected;
    DDS_Boolean is_payload_protected;
    DDS_Boolean is_key_protected;
    DDS_PluginEndpointTrustAttributesMask plugin_endpoint_attributes;
    struct DDS_PropertySeq ac_endpoint_properties;
} DDS_EndpointTrustAttributes;


#define DDS_PLUGIN_ENDPOINT_TRUST_ATTRIBUTES_MASK_DEFAULT 0
#define DDS_PLUGIN_ENDPOINT_TRUST_ATTRIBUTES_FLAG_IS_VALID (0x00000001 << 31)

#define DDS_ENDPOINT_TRUST_ATTRIBUTES_DEFAULT \
{ \
    DDS_TOPIC_TRUST_ATTRIBUTES_DEFAULT, /* parent */ \
    DDS_BOOLEAN_FALSE, /* is_submessage_protected */ \
    DDS_BOOLEAN_FALSE, /* is_payload_protected */ \
    DDS_BOOLEAN_FALSE, /* is_key_protected */ \
    DDS_PLUGIN_ENDPOINT_TRUST_ATTRIBUTES_MASK_DEFAULT, \
    PRES_DDS_SEQUENCE_INVALID /* ac_endpoint_properties */ \
}

typedef DDS_PublicationBuiltinTopicData
    DDS_PublicationBuiltinTopicDataTrust;

typedef DDS_SubscriptionBuiltinTopicData
    DDS_SubscriptionBuiltinTopicDataTrust;


#define DDS_PublicationBuiltinTopicDataTrust_INITIALIZER \
    DDS_PublicationBuiltinTopicData_INITIALIZER
#define DDS_SubscriptionBuiltinTopicDataTrust_INITIALIZER \
    DDS_SubscriptionBuiltinTopicData_INITIALIZER

struct DDS_LoggingPlugin;

struct DDS_AuthenticationPlugin;

typedef
DDS_ValidationResult_t (*DDS_Authentication_ValidateLocalIdentityFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_IdentityHandle *local_identity_handle, /* out */
    DDS_GUID_t *adjusted_participant_key, /* out */
    DDS_DomainId_t domain_id,
    const struct DDS_DomainParticipantQos *participant_qos,
    const DDS_GUID_t *candidate_participant_key,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_GetTokenFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_Token *token, /* out */
    const DDS_Handle handle,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_SetPermissionsCredentialAndTokenFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_IdentityHandle handle,
    const DDS_PermissionsCredentialToken *permissions_credential_token,
    DDS_TrustException *exception);

typedef
DDS_ValidationResult_t (*DDS_Authentication_ValidateRemoteIdentityFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_IdentityHandle *remote_identity_handle, /* out */
    DDS_AuthRequestMessageToken *local_auth_request_token, /* out */
    const DDS_AuthRequestMessageToken *remote_auth_request_token,
    const DDS_IdentityHandle local_identity_handle,
    const DDS_IdentityToken *remote_identity_token,
    const struct DDS_GUID_t *remote_participant_guid,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_SetLocalParticipantTrustedStateFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_IdentityHandle local_identity_handle,
    const DDS_TrustedState *local_participant_trusted_state,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_VerifyRemoteParticipantTrustedStateFunction)(
    struct DDS_AuthenticationPlugin *auth,
    const DDS_IdentityHandle remote_identity_handle,
    const DDS_HandshakeHandle handshake_handle,
    const DDS_TrustedState *remote_participant_trusted_state,
    DDS_TrustException *exception);

typedef
DDS_ValidationResult_t (*DDS_Authentication_BeginHandshakeRequestFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_HandshakeHandle *handshake_handle, /* out */
    DDS_HandshakeMessageToken *handshake_message, /* out */
    const DDS_IdentityHandle initiator_identity_handle,
    const DDS_IdentityHandle replier_identity_handle,
    const struct DDS_Buffer *serialized_participant_builtin_topic_data,
    DDS_TrustException *exception);

typedef
DDS_ValidationResult_t (*DDS_Authentication_BeginHandshakeReplyFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_HandshakeHandle *handshake_handle, /* out */
    DDS_HandshakeMessageToken *handshake_message_out,
    const DDS_HandshakeMessageToken *handshake_message_in,
    const DDS_IdentityHandle initiator_identity_handle,
    const DDS_IdentityHandle replier_identity_handle,
    const struct DDS_Buffer *serialized_participant_builtin_topic_data,
    DDS_TrustException *exception);

typedef
DDS_ValidationResult_t (*DDS_Authentication_ProcessHandshakeFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_HandshakeMessageToken *handshake_message_out,
    const DDS_HandshakeMessageToken *handshake_message_in,
    const DDS_HandshakeHandle handshake_handle,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_ReturnTokenFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_Token *token,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_GetSharedSecretFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_SharedSecretHandle *shared_secret_handle,
    const DDS_HandshakeHandle handshake_handle,
    const DDS_IdentityHandle local_identity_handle,
    const DDS_IdentityHandle remote_identity_handle,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_ReturnHandleFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_Handle handle,
    DDS_TrustException *exception);


typedef int (*DDS_Authentication_GetMaxPrivateSignatureSizeFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_TrustException *exception);


typedef DDS_Boolean (*DDS_Authentication_PrivateSignFunction)(
    struct DDS_AuthenticationPlugin *auth,
    struct DDS_Buffer *signature, /* out */
    const struct DDS_Buffer *data_to_sign,
    DDS_TrustException *exception);


typedef DDS_Boolean (*DDS_Authentication_VerifyPrivateSignatureFunction)(
    struct DDS_AuthenticationPlugin *auth,
    const struct DDS_Buffer *signed_data,
    const struct DDS_Buffer *signature,
    const DDS_IdentityHandle remote_identity_handle,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Authentication_SetRemoteParticipantInfoFunction)(
    struct DDS_AuthenticationPlugin *auth,
    DDS_IdentityHandle remote_identity_handle,
    const DDS_TrustedParticipantInfo *remote_participant_info,
    DDS_TrustException *exception);

typedef struct DDS_AuthenticationPlugin {
    void *plugin_data;
    struct DDS_LoggingPlugin *logging;

    DDS_Authentication_ValidateLocalIdentityFunction validate_local_identity;
    DDS_Authentication_GetTokenFunction get_identity_token;
    DDS_Authentication_SetPermissionsCredentialAndTokenFunction
        set_permissions_credential_and_token;
    DDS_Authentication_ValidateRemoteIdentityFunction validate_remote_identity;
    DDS_Authentication_BeginHandshakeRequestFunction begin_handshake_request;
    DDS_Authentication_BeginHandshakeReplyFunction begin_handshake_reply;
    DDS_Authentication_ProcessHandshakeFunction process_handshake;
    DDS_Authentication_ReturnTokenFunction return_handshake_message_token;
    DDS_Authentication_GetTokenFunction
        get_authenticated_peer_credential_token;
    DDS_Authentication_GetSharedSecretFunction get_shared_secret;
    DDS_Authentication_ReturnHandleFunction return_sharedsecret_handle;
    DDS_Authentication_ReturnTokenFunction
        return_authenticated_peer_credential_token;
    DDS_Authentication_ReturnTokenFunction return_identity_token;
    DDS_Authentication_ReturnHandleFunction return_handshake_handle;
    DDS_Authentication_ReturnHandleFunction return_identity_handle;

    DDS_Authentication_SetLocalParticipantTrustedStateFunction
        set_local_participant_trusted_state;
    DDS_Authentication_VerifyRemoteParticipantTrustedStateFunction
        verify_remote_participant_trusted_state;

    DDS_Authentication_GetMaxPrivateSignatureSizeFunction
        get_max_private_signature_size;
    DDS_Authentication_PrivateSignFunction private_sign;
    DDS_Authentication_VerifyPrivateSignatureFunction verify_private_signature;

    DDS_Authentication_SetRemoteParticipantInfoFunction
        set_remote_participant_info;
} DDS_AuthenticationPlugin;


#define DDS_Authentication_INITIALIZER { \
     NULL, /*plugin_data*/ \
     NULL, /*logging*/ \
     NULL, /*validate_local_identity*/ \
     NULL, /*get_identity_token*/ \
     NULL, /*set_permissions_credential_and_token*/ \
     NULL, /*validate_remote_identity*/ \
     NULL, /*begin_handshake_request*/ \
     NULL, /*begin_handshake_reply*/ \
     NULL, /*process_handshake*/ \
     NULL, /*return_handshake_message_token*/ \
     NULL, /*get_authenticated_peer_credential_token*/ \
     NULL, /*get_shared_secret*/ \
     NULL, /*return_sharedsecret_handle*/ \
     NULL, /*return_authenticated_peer_credential_token*/ \
     NULL, /*return_identity_token*/ \
     NULL, /*return_handshake_handle*/ \
     NULL, /*return_identity_handle*/ \
     NULL, /*set_local_participant_trusted_state*/ \
     NULL, /*verify_remote_participant_trusted_state*/ \
     NULL, /*get_max_private_signature_size*/ \
     NULL, /*private_sign*/ \
     NULL, /*verify_private_signature*/ \
     NULL  /*set_remote_participant_info*/ \
}

struct DDS_AccessControlPlugin;

typedef
DDS_PermissionsHandle (*DDS_AccessControl_ValidateLocalPermissionsFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_IdentityHandle identity,
    DDS_DomainId_t domain_id,
    const struct DDS_DomainParticipantQos *qos,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_ReturnPermissionsHandleFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_PermissionsHandle permissions_handle,
    DDS_TrustException *exception);

struct DDS_DomainParticipantQos;

typedef
DDS_Boolean (*DDS_AccessControl_CheckCreateParticipantFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const struct DDS_DomainParticipantQos *qos,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_GetTokenFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_Token *token, /* out */
    const DDS_PermissionsHandle handle,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_ReturnTokenFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_PermissionsToken *token,
    DDS_TrustException *exception);

typedef
DDS_PermissionsHandle (*DDS_AccessControl_ValidateRemotePermissionsFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle local_permissions_handle,
    const DDS_IdentityHandle remote_identity_handle,
    const DDS_PermissionsToken *remote_permissions_token,
    const DDS_AuthenticatedPeerCredentialToken *remote_credential_token,
    DDS_TrustException *exception);

struct DDS_ParticipantBuiltinTopicData;

typedef
DDS_Boolean (*DDS_AccessControl_CheckRemoteParticipantFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const struct DDS_ParticipantBuiltinTopicData *participant_data,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckCreateDatawriterFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const char *topic_name,
    const struct DDS_DataWriterQos *qos,
    const struct DDS_PartitionQosPolicy *partition,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckCreateDatareaderFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const char *topic_name,
    const struct DDS_DataReaderQos *qos,
    const struct DDS_PartitionQosPolicy *partition,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckCreateTopicFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const char *topic_name,
    const struct DDS_TopicQos *qos,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckRemoteTopicFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const struct DDS_TopicBuiltinTopicData *topic_data,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckRemoteDatawriterFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const DDS_PublicationBuiltinTopicDataTrust *publication_data,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckRemoteDatareaderFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    const DDS_SubscriptionBuiltinTopicDataTrust *subscription_data,
    DDS_Boolean *relay_only,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckLocalDatawriterMatchFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle writer_permissions_handle,
    const DDS_PermissionsHandle reader_permissions_handle,
    const DDS_PublicationBuiltinTopicDataTrust *publication_data,
    const DDS_SubscriptionBuiltinTopicDataTrust *subscription_data,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_CheckLocalDatareaderMatchFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle reader_permissions_handle,
    const DDS_PermissionsHandle writer_permissions_handle,
    const DDS_SubscriptionBuiltinTopicDataTrust *subscription_data,
    const DDS_PublicationBuiltinTopicDataTrust *publication_data,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_GetParticipantSecAttributesFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_ParticipantTrustAttributes *attributes, /* out */
    const DDS_PermissionsHandle permissions_handle,
    DDS_DomainId_t domain_id,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_GetTopicSecAttributesFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    const char *topic_name,
    DDS_TopicTrustAttributes *attributes, /* out */
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_GetEndpointSecAttributesFunction)(
    struct DDS_AccessControlPlugin *access_control,
    const DDS_PermissionsHandle permissions_handle,
    const char *topic_name,
    DDS_EndpointTrustAttributes *attributes, /* out */
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_ReturnParticipantSecAttributesFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_ParticipantTrustAttributes *attributes,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_AccessControl_ReturnEndpointSecAttributesFunction)(
    struct DDS_AccessControlPlugin *access_control,
    DDS_EndpointTrustAttributes *attributes,
    DDS_TrustException *exception);

typedef struct DDS_AccessControlPlugin {
    void *plugin_data;
    struct DDS_LoggingPlugin *logging;

    DDS_AccessControl_ValidateLocalPermissionsFunction validate_local_permissions;
    DDS_AccessControl_ReturnPermissionsHandleFunction return_permissions_handle;
    DDS_AccessControl_CheckCreateParticipantFunction check_create_participant;
    DDS_AccessControl_GetTokenFunction get_permissions_token;
    DDS_AccessControl_GetTokenFunction get_permissions_credential_token;
    DDS_AccessControl_ReturnTokenFunction return_permissions_token;
    DDS_AccessControl_ReturnTokenFunction return_permissions_credential_token;
    DDS_AccessControl_ValidateRemotePermissionsFunction validate_remote_permissions;
    DDS_AccessControl_CheckRemoteParticipantFunction check_remote_participant;
    DDS_AccessControl_CheckCreateDatawriterFunction check_create_datawriter;
    DDS_AccessControl_CheckCreateDatareaderFunction check_create_datareader;
    DDS_AccessControl_CheckCreateTopicFunction check_create_topic;
    DDS_AccessControl_CheckRemoteDatawriterFunction check_remote_datawriter;
    DDS_AccessControl_CheckRemoteDatareaderFunction check_remote_datareader;
    DDS_AccessControl_CheckRemoteTopicFunction check_remote_topic;
    DDS_AccessControl_CheckLocalDatawriterMatchFunction check_local_datawriter_match;
    DDS_AccessControl_CheckLocalDatareaderMatchFunction check_local_datareader_match;
    DDS_AccessControl_GetParticipantSecAttributesFunction
        get_participant_sec_attributes;
    DDS_AccessControl_GetTopicSecAttributesFunction get_topic_sec_attributes;
    DDS_AccessControl_GetEndpointSecAttributesFunction
        get_datawriter_sec_attributes;
    DDS_AccessControl_GetEndpointSecAttributesFunction
        get_datareader_sec_attributes;
    DDS_AccessControl_ReturnParticipantSecAttributesFunction
        return_participant_sec_attributes;
    DDS_AccessControl_ReturnEndpointSecAttributesFunction
        return_datawriter_sec_attributes;
    DDS_AccessControl_ReturnEndpointSecAttributesFunction
        return_datareader_sec_attributes;
} DDS_AccessControlPlugin;


#define DDS_AccessControl_INITIALIZER { \
     NULL, /* plugin_data */ \
     NULL, /* logging */ \
     NULL, /* validate_local_permissions */ \
     NULL, /* return_permissions_handle */ \
     NULL, /* check_create_participant */ \
     NULL, /* get_permissions_token */ \
     NULL, /* get_permissions_credential_token */ \
     NULL, /* return_permissions_token */ \
     NULL, /* return_permissions_credential_token */ \
     NULL, /* validate_remote_permissions */ \
     NULL, /* check_remote_participant */ \
     NULL, /* check_create_datawriter */ \
     NULL, /* check_create_datareader */ \
     NULL, /* check_create_topic */ \
     NULL, /* check_remote_datawriter */ \
     NULL, /* check_remote_datareader */ \
     NULL, /* check_remote_topic */ \
     NULL, /* check_local_datawriter_match */ \
     NULL, /* check_local_datareader_match */ \
     NULL, /* get_participant_sec_attributes */ \
     NULL, /* get_topic_sec_attributes */ \
     NULL, /* get_datawriter_sec_attributes */ \
     NULL, /* get_datareader_sec_attributes */ \
     NULL, /* return_participant_sec_attributes */ \
     NULL, /* return_datawriter_sec_attributes */ \
     NULL  /* return_datareader_sec_attributes */ \
}

/* These Interceptor APIs are not intended for use by end-users. */

typedef
DDS_ParticipantInterceptorHandle
(*DDS_Interceptor_RegisterLocalParticipantFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    const DDS_IdentityHandle participant_identity,
    const DDS_PermissionsHandle participant_permissions,
    const struct DDS_PropertySeq *participant_properties,
    const DDS_ParticipantTrustAttributes *participant_trust_attributes,
    DDS_InterceptorException *exception);

typedef
DDS_ParticipantInterceptorHandle
(*DDS_Interceptor_RegisterMatchedRemoteParticipantFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    const DDS_ParticipantInterceptorHandle local_participant_interceptor_handle,
    const DDS_IdentityHandle remote_participant_identity,
    const DDS_PermissionsHandle remote_participant_permissions,
    const DDS_SharedSecretHandle shared_secret,
    DDS_InterceptorException *exception);

typedef
DDS_DataWriterInterceptorHandle (*DDS_Interceptor_RegisterLocalEndpointFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    const DDS_Handle local_participant_interceptor_handle,
    const struct DDS_PropertySeq *local_endpoint_properties,
    const DDS_EndpointTrustAttributes *endpoint_trust_attributes,
    DDS_InterceptorException *exception);

typedef
DDS_DataReaderInterceptorHandle
(*DDS_Interceptor_RegisterMatchedRemoteEndpointFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    const DDS_Handle local_endpoint_interceptor_handle,
    const DDS_Handle remote_participant_interceptor_handle,
    const DDS_SharedSecretHandle shared_secret,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_UnregisterFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    DDS_Handle handle,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_CreateLocalInterceptorStateFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_DataHolderSeq *local_interceptor_state, /* out */
    const DDS_Handle local_interceptor_handle,
    const DDS_Handle remote_interceptor_handle,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_SetRemoteInterceptorStateFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    const DDS_Handle local_interceptor_handle,
    DDS_Handle remote_interceptor_handle,
    const struct DDS_DataHolderSeq *remote_tokens,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_SetLocalInterceptorStateFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    DDS_Handle local_interceptor_handle,
    const struct DDS_DataHolderSeq *interceptor_state,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_ReturnInterceptorStateFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_DataHolderSeq *interceptor_state,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_TransformInterceptorStateFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_Buffer *serialized_interceptor_state,
    struct DDS_DataHolderSeq *interceptor_state,
    const struct DDS_Buffer *transformation_key, /* in */
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_TransformOutgoingSerializedDataFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_Buffer *transformed_serialized_data, /* out */
    const struct DDS_Buffer *outgoing_buffers,
    int outgoing_buffer_count,
    const DDS_DataWriterInterceptorHandle sending_datawriter_handle,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_TransformOutgoingMetaDataFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_Buffer *transformed_meta_data, /* out */
    const struct DDS_Buffer *outgoing_buffers,
    int outgoing_buffer_count,
    const DDS_Handle sender_handle,
    const DDS_InlineList *receiver_handle_list,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_PreprocessInterceptorSubmsgFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    DDS_InterceptorSubmessageCategory_t *interceptor_submessage_category,
    DDS_DataWriterInterceptorHandle *datawriter_handle, 
    DDS_DataReaderInterceptorHandle *datareader_handle, 
    const struct DDS_Buffer *incoming_submessage,
    const DDS_ParticipantInterceptorHandle receiver_participant_handle,
    const DDS_ParticipantInterceptorHandle sender_participant_handle,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_TransformIncomingMetaDataFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_Buffer *transformed_meta_data, /* out */
    const struct DDS_Buffer *incoming_buffer,
    const DDS_Handle receiver_participant_handle,
    const DDS_Handle sender_participant_handle,
    DDS_InterceptorException *exception);

typedef
DDS_Boolean (*DDS_Interceptor_TransformIncomingSerializedDataFunction)(
    struct DDS_InterceptorPlugin *interceptor,
    struct DDS_Buffer *transformed_serialized_data, /* out */
    const struct DDS_Buffer *incoming_buffer,
    const DDS_DataReaderInterceptorHandle receiving_datareader_handle,
    const DDS_DataWriterInterceptorHandle sending_datawriter_handle,
    DDS_InterceptorException *exception);

typedef
DDS_UnsignedLong (*DDS_Interceptor_GetTransformedOutgoingContentMaxSerializedSizeFunction)(
        struct DDS_InterceptorPlugin *interceptor,
        DDS_UnsignedLong input_size,
        DDS_InterceptorException *exception);

typedef struct DDS_InterceptorPlugin {
    void *plugin_data;
    struct DDS_LoggingPlugin *logging;

    /* InterceptorFactory interface */
    DDS_Interceptor_RegisterLocalParticipantFunction register_local_participant;
    DDS_Interceptor_RegisterMatchedRemoteParticipantFunction
        register_matched_remote_participant;
    DDS_Interceptor_RegisterLocalEndpointFunction register_local_datawriter;
    DDS_Interceptor_RegisterMatchedRemoteEndpointFunction
        register_matched_remote_datareader;
    DDS_Interceptor_RegisterLocalEndpointFunction register_local_datareader;
    DDS_Interceptor_RegisterMatchedRemoteEndpointFunction
        register_matched_remote_datawriter;
    DDS_Interceptor_UnregisterFunction unregister_participant;
    DDS_Interceptor_UnregisterFunction unregister_datawriter;
    DDS_Interceptor_UnregisterFunction unregister_datareader;

    /* InterceptorSetup interface */
    DDS_Interceptor_CreateLocalInterceptorStateFunction
        create_local_participant_interceptor_state;
    DDS_Interceptor_SetRemoteInterceptorStateFunction
        set_remote_participant_interceptor_state;
    DDS_Interceptor_CreateLocalInterceptorStateFunction
        create_local_datawriter_interceptor_state;
    DDS_Interceptor_SetRemoteInterceptorStateFunction
        set_remote_datawriter_interceptor_state;
    DDS_Interceptor_CreateLocalInterceptorStateFunction
        create_local_datareader_interceptor_state;
    DDS_Interceptor_SetRemoteInterceptorStateFunction
        set_remote_datareader_interceptor_state;
    DDS_Interceptor_SetLocalInterceptorStateFunction
        set_local_datawriter_interceptor_state;
    DDS_Interceptor_ReturnInterceptorStateFunction return_interceptor_state;

    /* InterceptorTransform interface */
    DDS_Interceptor_TransformInterceptorStateFunction
        transform_outgoing_local_datawriter_interceptor_state;
    DDS_Interceptor_TransformInterceptorStateFunction
        transform_incoming_local_datawriter_interceptor_state;
    DDS_Interceptor_TransformOutgoingSerializedDataFunction
        transform_outgoing_serialized_data;
    DDS_Interceptor_TransformOutgoingMetaDataFunction
        transform_outgoing_datawriter_submessage;
    DDS_Interceptor_TransformOutgoingMetaDataFunction
        transform_outgoing_datareader_submessage;
    DDS_Interceptor_TransformOutgoingMetaDataFunction
        transform_outgoing_rtps_message;
    DDS_Interceptor_PreprocessInterceptorSubmsgFunction
        preprocess_interceptor_submsg;
    DDS_Interceptor_TransformIncomingMetaDataFunction
        transform_incoming_rtps_message;
    DDS_Interceptor_TransformIncomingMetaDataFunction
        transform_incoming_datawriter_submessage;
    DDS_Interceptor_TransformIncomingMetaDataFunction
        transform_incoming_datareader_submessage;
    DDS_Interceptor_TransformIncomingSerializedDataFunction
        transform_incoming_serialized_data;
    DDS_Interceptor_GetTransformedOutgoingContentMaxSerializedSizeFunction
        get_transformed_outgoing_serialized_sample_size;
    DDS_Interceptor_GetTransformedOutgoingContentMaxSerializedSizeFunction
        get_transformed_datawriter_submessage_max_serialized_size;
    DDS_Interceptor_GetTransformedOutgoingContentMaxSerializedSizeFunction
        get_transformed_datareader_submessage_max_serialized_size;
    DDS_Interceptor_GetTransformedOutgoingContentMaxSerializedSizeFunction
        get_transformed_rtps_message_max_serialized_size;

} DDS_InterceptorPlugin;


#define DDS_Interceptor_INITIALIZER { \
     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \
     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \
     NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL \
}

struct DDS_LogOptions {
    DDS_Long         log_level;
    char            *log_file;
    DDS_Boolean      distribute;
    DDS_UnsignedLong queue_size;
    DDS_UnsignedLong queue_message_count_max;
    DDS_UnsignedLong queue_message_size_max;
    DDS_UnsignedLong thread_message_threshold;
    DDS_UnsignedLong thread_plugin_method_threshold;
    DDS_UnsignedLong thread_plugin_class_threshold;
    char             *profile;
    DDS_Long         writer_history_depth;
    struct DDS_Duration_t writer_timeout;
    DDS_Boolean      auto_enable_writer;
};



#define DDS_LOGGING_TOPIC_NAME          "DDS:Security:LogTopic"
#define DDS_LOGGING_EMERGENCY_LEVEL     PRES_TRUST_LOGGING_EMERGENCY_LEVEL
#define DDS_LOGGING_ALERT_LEVEL         PRES_TRUST_LOGGING_ALERT_LEVEL
#define DDS_LOGGING_CRITICAL_LEVEL      PRES_TRUST_LOGGING_CRITICAL_LEVEL
#define DDS_LOGGING_ERROR_LEVEL         PRES_TRUST_LOGGING_ERROR_LEVEL
#define DDS_LOGGING_WARNING_LEVEL       PRES_TRUST_LOGGING_WARNING_LEVEL
#define DDS_LOGGING_NOTICE_LEVEL        PRES_TRUST_LOGGING_NOTICE_LEVEL
#define DDS_LOGGING_INFORMATIONAL_LEVEL PRES_TRUST_LOGGING_INFORMATIONAL_LEVEL
#define DDS_LOGGING_DEBUG_LEVEL         PRES_TRUST_LOGGING_DEBUG_LEVEL

#define DDS_LOGGING_COMMON_CLASS \
    PRES_TRUST_LOGGING_COMMON_CLASS

#define DDS_LOGGING_AUTHENTICATION_CLASS \
    PRES_TRUST_LOGGING_AUTHENTICATION_CLASS

#define DDS_LOGGING_ACCESS_CONTROL_CLASS \
    PRES_TRUST_LOGGING_ACCESS_CONTROL_CLASS

#define DDS_LOGGING_INTERCEPTOR_CLASS \
    PRES_TRUST_LOGGING_INTERCEPTOR_CLASS

#define DDS_LOGGING_TRUST_CLASS \
    PRES_TRUST_LOGGING_TRUST_CLASS

#define DDS_LOGGING_LOGGING_CLASS \
    PRES_TRUST_LOGGING_LOGGING_CLASS

/* OMG Specification GMCLASSIDs */
#define DDS_GMCLASSID_TRUST_AUTH_HANDSHAKE \
        PRES_GMCLASSID_TRUST_AUTH_HANDSHAKE

#define DDS_GMCLASSID_TRUST_AUTH_REQUEST \
        PRES_GMCLASSID_TRUST_AUTH_REQUEST

#define DDS_GMCLASSID_TRUST_PARTICIPANT_INTERCEPTOR_STATE \
        PRES_GMCLASSID_TRUST_PARTICIPANT_INTERCEPTOR_STATE
#define DDS_GMCLASSID_TRUST_DATAWRITER_INTERCEPTOR_STATE \
        PRES_GMCLASSID_TRUST_DATAWRITER_INTERCEPTOR_STATE
#define DDS_GMCLASSID_TRUST_DATAREADER_INTERCEPTOR_STATE \
        PRES_GMCLASSID_TRUST_DATAREADER_INTERCEPTOR_STATE

/* RTI Specific Class-Id to re-negotiate authentication. */
#define DDS_GMCLASSID_TRUST_RTI_AUTH_REQUEST \
        PRES_GMCLASSID_TRUST_RTI_AUTH_REQUEST

#define DDS_GMCLASSID_TRUST_RTI_PLUGIN_PREFIX \
        PRES_GMCLASSID_TRUST_RTI_PLUGINS_PREFIX

#define RTI_TRUST_PLUGIN_CLASS_ID_USE_530_AUTH_REQUEST \
        DDS_GMCLASSID_TRUST_RTI_PLUGIN_PREFIX "use_530_auth_request"

typedef
DDS_Boolean (*DDS_Logging_SetLogOptionsFunction)(
    struct DDS_LoggingPlugin *logging,
    const struct DDS_LogOptions *options,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Logging_LogFunction)(
    struct DDS_LoggingPlugin *logging,
    DDS_Long log_level,
    const char *plugin_class,
    const char *plugin_method,
    const char *message,
    DDS_TrustException *exception);

typedef
DDS_Boolean (*DDS_Logging_EnableLoggingFunction)(
    struct DDS_LoggingPlugin *logging,
    DDS_TrustException *exception);

typedef
void (*DDS_Logging_SetDomainParticipantFunction)(
    struct DDS_LoggingPlugin *logging,
    DDS_DomainParticipant *participant,
    DDS_TrustException *exception);

typedef
void (*DDS_Logging_DeleteFunction)(
    struct DDS_LoggingPlugin *logging);

typedef struct DDS_LoggingPlugin {
    void *plugin_data;

    DDS_Logging_SetLogOptionsFunction set_log_options;
    DDS_Logging_LogFunction log;
    DDS_Logging_EnableLoggingFunction enable_logging;
    DDS_Logging_SetDomainParticipantFunction set_domain_participant;
    DDS_Logging_DeleteFunction delete_function;
} DDS_LoggingPlugin;


#define DDS_LoggingPlugin_INITIALIZER {NULL, NULL, NULL, NULL, NULL, NULL}

struct DDS_TrustPluginSuite;

typedef
void (*DDS_TrustPluginSuite_DeleteFunction)(
    struct DDS_TrustPluginSuite *trustPluginSuite);

struct DDS_TrustPluginSuite {
    struct DDS_LoggingPlugin logging;
    struct DDS_InterceptorPlugin interceptor;
    struct DDS_AuthenticationPlugin authentication;
    struct DDS_AccessControlPlugin access_control;
    DDS_TrustPluginSuite_DeleteFunction delete_function;
};

 extern DDSCDllVariable const struct DDS_TrustPluginSuite
    DDS_TRUST_PLUGIN_SUITE_DEFAULT;

typedef
void (*DDS_TrustPluginSuite_CreateFunction)(
    struct DDS_TrustPluginSuite **trustPluginSuite,
    const struct DDS_PropertyQosPolicy *properties);


#define DDS_InterceptorTransformKind MIGRtpsInterceptorTransformKind
#define DDS_InterceptorTransformKeyId MIGRtpsInterceptorTransformKeyId

#define DDS_InterceptorTransformIdentifier MIGRtpsInterceptorTransformIdentifier

#define DDS_DomainParticipantTrustPlugins_getSpaceLeft \
        MIGInterpreter_getSpaceLeft

#define DDS_DomainParticipantTrustPlugins_assertBufferSpace \
        MIGInterpreter_assertBufferSpace

extern DDSCDllExport
void DDS_DomainParticipantTrustPlugins_serialize_prefix_submsg(
        struct DDS_Buffer *buffer,
        struct DDS_Buffer *plugin_header,
        DDS_InterceptorTransformKind transform_kind,
        DDS_InterceptorTransformKeyId transform_key_id,
        int plugin_header_length,
        DDS_Boolean is_rtps_message);

extern DDSCDllExport
void DDS_DomainParticipantTrustPlugins_serialize_postfix_submsg(
        struct DDS_Buffer *buffer,
        struct DDS_Buffer *plugin_tag,
        int plugin_tag_length,
        DDS_Boolean is_rtps_message);

extern DDSCDllExport
void DDS_DomainParticipantTrustPlugins_serialize_body_submsg(
        struct DDS_Buffer *buffer,
        struct DDS_Buffer *plugin_data_body,
        int plugin_data_body_length);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_deserialize_submsg_header(
        MIGRtpsSubmessageId *submessageId,
        MIGRtpsSubmessageFlag *submessageFlags,
        RTI_UINT16 *submessagePayloadLength,
        const struct DDS_Buffer *buffer);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_deserialize_prefix_submsg(
        struct DDS_InterceptorTransformIdentifier *transform_id,
        struct DDS_Buffer *plugin_header,
        const struct DDS_Buffer *buffer,
        DDS_Boolean is_rtps_message);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_deserialize_postfix_submsg(
        struct DDS_Buffer *plugin_tag,
        const struct DDS_Buffer *buffer,
        DDS_Boolean is_rtps_message);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_skip_to_submsg(
        struct DDS_Buffer *buffer_out,
        const struct DDS_Buffer *buffer,
        MIGRtpsSubmessageId requested_submsg_id);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_deserialize_body(
        struct DDS_Buffer *plugin_data,
        const struct DDS_Buffer *buffer);

extern DDSCDllExport
int DDS_DomainParticipantTrustPlugins_serialize_infosrc_from_rtps_header(
        char *buffer,
        char *rtps_buffer);

extern DDSCDllExport
DDS_Boolean DDS_DomainParticipantTrustPlugins_validate_infosrc(
        char *buffer,
        char *rtps_buffer);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_trust_plugins_h */
