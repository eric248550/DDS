/* (c) Copyright 2003-2018, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_shmem.h    generated by: makeheader    Thu Feb 28 22:11:58 2019
 *
 *		built from:	shmem.ifc
 */

#ifndef transport_shmem_h
#define transport_shmem_h


  #ifndef transport_dll_h
    #include "transport/transport_dll.h"
  #endif
  #ifndef transport_interface_h
    #include "transport/transport_interface.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct RTIClock;

struct NDDS_Transport_Shmem_Property_t {
    /*e \dref_ShmemTransport_Property_t_parent 
    */
    struct NDDS_Transport_Property_t parent;

    /*e \dref_ShmemTransport_Property_t_received_message_count_max
     */
    RTI_INT32 received_message_count_max;

    /*e \dref_ShmemTransport_Property_t_receive_buffer_size
    */
    RTI_INT32 receive_buffer_size;

    /*e \dref_ShmemTransport_Property_t_enable_udp_debugging
     */
    RTIBool enable_udp_debugging;

    /*e \dref_ShmemTransport_Property_t_udp_debugging_address
     */
    NDDS_Transport_Address_t udp_debugging_address;

    /*e \dref_ShmemTransport_Property_t_udp_debugging_port
     */
    NDDS_Transport_Port_t udp_debugging_port;

    /*i offset used for port -> segment key mapping */
    RTI_INT32 segmentKeyOffset;

    /*i factor used for port -> segment key mapping */
    RTI_INT32 segmentKeyFactor;

    /*i offset used for port -> semaphore key mapping */
    RTI_INT32 semaphoreKeyOffset;

    /*i factor used for port -> semaphore key mapping */
    RTI_INT32 semaphoreKeyFactor;

    /*i offset used for port -> mutex key mapping */
    RTI_INT32 mutexKeyOffset;

    /*i factor used for port -> mutex key mapping */
    RTI_INT32 mutexKeyFactor;

    /*i The maximum duration that a writer can take to write this message.
	If a writer takes longer, it can be potentially be aborted writing
	by a reader believing the writer is stuck (i.e. in an infinite loop).
	The resolution is in milliseconds. 
        Default value is 1000
     */
    RTI_UINT32 maxAllowedWriterDurationMillisec;

    /*i IMPORTANT: This value is used for unit testing purposes ONLY! If 
       this value is true then create recv resource will fail */
    RTIBool reserved;

    /*i
     * UUID used to check the reachability of a shmem locator received through
     * discovery. After attaching to a shmem segment, we will check that
     * the UUID in the header matches the one in the received locator.
     * If it matches, that means that we are on the same machine than
     * the target locator and that communication is possible through shmem.
     */
    NDDS_Transport_Address_t shmemUUID;

};


#define NDDS_TRANSPORT_SHMEM_CLASS_NAME		"shmem"


#define NDDS_TRANSPORT_BUILTIN_SHMEM_ALIAS      "builtin.shmem"


#define NDDS_TRANSPORT_SHMEM_ADDRESS_BIT_COUNT  (-96)


#define NDDS_TRANSPORT_SHMEM_PROPERTIES_BITMAP_DEFAULT \
              ( NDDS_TRANSPORT_PROPERTY_BIT_BUFFER_ALWAYS_LOANED )


#define NDDS_TRANSPORT_SHMEM_GATHER_SEND_BUFFER_COUNT_MAX_DEFAULT (1024)


#if defined(RTI_INTY)
#define NDDS_TRANSPORT_SHMEM_MESSAGE_SIZE_MAX_DEFAULT (9216)
#else
#define NDDS_TRANSPORT_SHMEM_MESSAGE_SIZE_MAX_DEFAULT (65536)
#endif


#if defined(RTI_INTY)
#define NDDS_TRANSPORT_SHMEM_RECEIVED_MESSAGE_COUNT_MAX_DEFAULT (8)
#else
#define NDDS_TRANSPORT_SHMEM_RECEIVED_MESSAGE_COUNT_MAX_DEFAULT  (64)
#endif


#define NDDS_TRANSPORT_SHMEM_RECEIVE_BUFFER_SIZE_DEFAULT  \
        (NDDS_TRANSPORT_SHMEM_RECEIVED_MESSAGE_COUNT_MAX_DEFAULT * \
         NDDS_TRANSPORT_SHMEM_MESSAGE_SIZE_MAX_DEFAULT / 4)


#define NDDS_TRANSPORT_SHMEM_PROPERTY_DEFAULT { \
    { NDDS_TRANSPORT_CLASSID_SHMEM, \
      NDDS_TRANSPORT_SHMEM_ADDRESS_BIT_COUNT, \
      NDDS_TRANSPORT_SHMEM_PROPERTIES_BITMAP_DEFAULT, \
      NDDS_TRANSPORT_SHMEM_GATHER_SEND_BUFFER_COUNT_MAX_DEFAULT, \
      NDDS_TRANSPORT_SHMEM_MESSAGE_SIZE_MAX_DEFAULT, \
      NULL, 0, /* allow_interfaces_list */ \
      NULL, 0, /* deny_interfaces_list */ \
      NULL, 0, /* allow_multicast_interfaces_list */ \
      NULL, 0, /* deny_multicast_interfaces_list */ \
      NULL, /* domain_participant_ptr */ \
    }, \
    NDDS_TRANSPORT_SHMEM_RECEIVED_MESSAGE_COUNT_MAX_DEFAULT, \
    NDDS_TRANSPORT_SHMEM_RECEIVE_BUFFER_SIZE_DEFAULT, \
    RTI_FALSE, /* enable_udp_debugging */ \
    {{0,0,0,0, 0,0,0,0, 0,0,0,0, 239,255,1,2}}, /* udp_debugging_address */ \
    7399, /* udp_debugging_port */\
    0x400000, /* 0100 xxxx ... */         \
    1,                                    \
    0x800000, /* 1000 xxxx ... */         \
    1,                                    \
    0xB00000, /* 1100 xxxx ... */         \
    1,                                    \
    1000,   /* maxAllowedWriterDurationMillisec */    \
    RTI_FALSE, /* reserved */ \
    NDDS_TRANSPORT_ADDRESS_INVALID /* shmemUUID */ \
 }

extern NDDS_Transport_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_Shmem_newI(
    const struct NDDS_Transport_Shmem_Property_t *property,
    struct RTIClock                              *clock_in);

extern NDDS_Transport_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_Shmem_new(
    const struct NDDS_Transport_Shmem_Property_t *property_in);


#define NDDS_Transport_Shmem_new(property_in) \
        NDDS_Transport_Shmem_newI(property_in, NULL)

extern NDDS_Transport_DllExport 
const char * NDDS_Transport_Shmem_get_class_name_cEA(
    NDDS_Transport_Plugin    *self);

extern NDDS_Transport_DllExport 
RTI_INT32 NDDS_Transport_Shmem_string_to_address_cEA(
    NDDS_Transport_Plugin    *self,
    NDDS_Transport_Address_t *address_out,
    const char               *address_in);

extern NDDS_Transport_DllExport 
RTI_INT32 NDDS_Transport_Shmem_get_receive_interfaces_cEA(
    NDDS_Transport_Plugin      *self,
    RTI_INT32                  *found_more_than_provided_for_out,
    RTI_INT32                  *interface_reported_count_out,
    NDDS_Transport_Interface_t  interface_array_inout[],
    RTI_INT32                   interface_array_size_in);

extern NDDS_Transport_DllExport 
RTIBool NDDS_Transport_Shmem_is_valid(NDDS_Transport_Plugin *self);

extern NDDS_Transport_DllExport
RTIBool NDDS_Transport_Shmem_check_locator_reachability(
    const NDDS_Transport_Plugin *self,
    RTIBool *is_reachable_out,
    const NDDS_Transport_Address_t *address_in,
    RTI_INT32 port_in);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_shmem_h */
