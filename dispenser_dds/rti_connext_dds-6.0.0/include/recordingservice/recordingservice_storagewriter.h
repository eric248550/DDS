/*
 * @(#)recordingservice_storagewriter.h    generated by: makeheader    Thu Feb 28 22:15:30 2019
 *
 *		built from:	storagewriter.ifc
 */

#ifndef recordingservice_storagewriter_h
#define recordingservice_storagewriter_h



#ifndef dds_c_builtin_h
#include "dds_c/dds_c_builtin.h"
#endif

#include "routingservice/routingservice_infrastructure.h"

 #ifdef __cplusplus
    extern "C" {
 #endif



#define RTI_RECORDING_SERVICE_DOMAIN_ID_PROPERTY_NAME \
        "rti.recording_service.domain_id"
#define RTI_RECORDING_SERVICE_START_TIMESTAMP_PROPERTY_NAME \
        "rti.recording_service.start_timestamp"
#define RTI_RECORDING_SERVICE_END_TIMESTAMP_PROPERTY_NAME \
        "rti.recording_service.end_timestamp"



struct RTI_RecordingServiceStorageWriter;


struct RTI_RecordingServiceStorageStreamWriter;


typedef void (*RTI_RecordingServiceStorageStreamWriter_StoreFcn)(
        void *stream_writer_data,
        const RTI_RoutingServiceSample *samples,
        const RTI_RoutingServiceSampleInfo *sample_infos,
        const int count);


struct RTI_RecordingServiceStorageStreamWriter {

    /*e @brief Implement the store function to write data to the storage of
     *  your choice. (required)
     */
    RTI_RecordingServiceStorageStreamWriter_StoreFcn store;

    /*e @brief A pointer for any data the plug-in might need.  Passed to the
     *  store() function at runtime.
     */
    void *stream_writer_data;
};


#define RTI_RecordingServiceStorageStreamWriter_initialize(storage_writer) \
{\
    (storage_writer)->store = NULL; \
    (storage_writer)->stream_writer_data = NULL; \
}


typedef void (*RTI_RecordingServiceStorageParticipantWriter_StoreFcn)(
        void *stream_writer_data,
        const DDS_ParticipantBuiltinTopicData **samples,
        const RTI_RoutingServiceSampleInfo *sample_infos,
        const int count);


struct RTI_RecordingServiceStorageParticipantWriter {

    /*e @brief Implement the store function to write data to the storage of
     *  your choice. (required)
     */
    RTI_RecordingServiceStorageParticipantWriter_StoreFcn store;

    /*e @brief A pointer for any data the plug-in might need.  Passed to the
     *  store() function at runtime.
     */
    void *stream_writer_data;
};


#define RTI_RecordingServiceStorageParticipantWriter_initialize(storage_writer) \
{\
    (storage_writer)->store = NULL; \
    (storage_writer)->stream_writer_data = NULL; \
}


typedef void (*RTI_RecordingServiceStoragePublicationWriter_StoreFcn)(
        void *stream_writer_data,
        const DDS_PublicationBuiltinTopicData **samples,
        const RTI_RoutingServiceSampleInfo *sample_infos,
        const int count);


struct RTI_RecordingServiceStoragePublicationWriter {

    /*e @brief Implement the store function to write data to the storage of
     *  your choice. (required)
     */
    RTI_RecordingServiceStoragePublicationWriter_StoreFcn store;

    /*e @brief A pointer for any data the plug-in might need.  Passed to the
     *  store() function at runtime.
     */
    void *stream_writer_data;
};


#define RTI_RecordingServiceStoragePublicationWriter_initialize(storage_writer) \
{\
    (storage_writer)->store = NULL; \
    (storage_writer)->stream_writer_data = NULL; \
}


typedef void (*RTI_RecordingServiceStorageSubscriptionWriter_StoreFcn)(
        void *stream_writer_data,
        const DDS_SubscriptionBuiltinTopicData **samples,
        const RTI_RoutingServiceSampleInfo *sample_infos,
        const int count);


struct RTI_RecordingServiceStorageSubscriptionWriter {

    /*e @brief Implement the store function to write data to the storage of
     *  your choice. (required)
     */
    RTI_RecordingServiceStorageSubscriptionWriter_StoreFcn store;

    /*e @brief A pointer for any data the plug-in might need.  Passed to the
     *  store() function at runtime.
     */
    void *stream_writer_data;
};


#define RTI_RecordingServiceStorageSubscriptionWriter_initialize(storage_writer) \
{\
    (storage_writer)->store = NULL; \
    (storage_writer)->stream_writer_data = NULL; \
}


typedef struct RTI_RecordingServiceStorageStreamWriter *
(*RTI_RecordingServiceStorageWriter_CreateStreamWriterFcn)(
        void *storage_writer_data,
        const struct RTI_RoutingServiceStreamInfo *stream_info,
        const struct RTI_RoutingServiceProperties *properties);


typedef struct RTI_RecordingServiceStorageParticipantWriter *
(*RTI_RecordingServiceStorageWriter_CreateParticipantWriterFcn)(
        void *storage_writer_data);


typedef struct RTI_RecordingServiceStoragePublicationWriter *
(*RTI_RecordingServiceStorageWriter_CreatePublicationWriterFcn)(
        void *storage_writer_data);


typedef struct RTI_RecordingServiceStorageSubscriptionWriter *
(*RTI_RecordingServiceStorageWriter_CreateSubscriptionWriterFcn)(
        void *storage_writer_data);


typedef void (*RTI_RecordingServiceStorageWriter_DeleteStreamWriterFcn)(
        void *storage_writer_data,
        struct RTI_RecordingServiceStorageStreamWriter *stream_writer);


typedef void (*RTI_RecordingServiceStorageWriter_DeleteParticipantWriterFcn)(
        void *storage_writer_data,
        struct RTI_RecordingServiceStorageParticipantWriter *stream_writer);


typedef void (*RTI_RecordingServiceStorageWriter_DeletePublicationWriterFcn)(
        void *storage_writer_data,
        struct RTI_RecordingServiceStoragePublicationWriter *stream_writer);


typedef void (*RTI_RecordingServiceStorageWriter_DeleteSubscriptionWriterFcn)(
        void *storage_writer_data,
        struct RTI_RecordingServiceStorageSubscriptionWriter *stream_writer);


typedef void (*RTI_RecordingServiceStorageWriter_DeleteFcn)(
        struct RTI_RecordingServiceStorageWriter *storage_writer);


struct RTI_RecordingServiceStorageWriter {

    /*e @brief [Required] Implement the create_stream_writer function to
     *  allocate stream writer objects when notified about new streams.
     *
     *  This call will only be used by \product when creating user-data streams.
     *  For any of the three built-in DDS discovery streams, \product will use
     *  the create_participant/publication/subscription_writer() methods.
     */
    RTI_RecordingServiceStorageWriter_CreateStreamWriterFcn create_stream_writer;

    /*e @brief [Not required] Implement the creation function to allocate a
     *  stream writer dedicated to the DDS Participant built-in topic
     *  (DCPSParticipant).
     *
     *  This function is not required. The participant stream writer won't be
     *  created if this function not available.
     */
    RTI_RecordingServiceStorageWriter_CreateParticipantWriterFcn create_participant_writer;

    /*e @brief [Not required] Implement the creation function to allocate a
     *  stream writer dedicated to the DDS Publication built-in topic
     *  (DCPSPublication).
     *
     *  This function is not required. The publication stream writer won't be
     *  created if this function is not available.
     */
    RTI_RecordingServiceStorageWriter_CreatePublicationWriterFcn create_publication_writer;

    /*e @brief [Not required] Implement the creation function to allocate a
     *  stream writer dedicated to the DDS Subscription built-in topic
     *  (DCPSSubscription).
     *
     *  This function is not required. The subscription stream writer won't be
     *  created if this function not available.
     */
    RTI_RecordingServiceStorageWriter_CreateSubscriptionWriterFcn create_subscription_writer;

    /*e @brief [Required] Implement this delete_stream_writer function to delete
     *  stream writer objects when notified about stream disposals or when the
     *  service is stopping.
     *
     *  This method is used to delete instances of user-data stream writers.
     */
    RTI_RecordingServiceStorageWriter_DeleteStreamWriterFcn delete_stream_writer;

    /*e @brief [Not required] Implement this function to delete DCPSParticipant
     *  writer objects. This function must be defined if the creation
     *  counterpart function was defined.
     */
    RTI_RecordingServiceStorageWriter_DeleteParticipantWriterFcn delete_participant_writer;

    /*e @brief [Not required] Implement this function to delete DCPSPublication
     *  writer objects. This function must be defined if the creation
     *  counterpart function was defined.
     */
    RTI_RecordingServiceStorageWriter_DeletePublicationWriterFcn delete_publication_writer;

    /*e @brief [Not required] Implement this function to delete DCPSSubscription
     *  writer objects. This function must be defined if the creation
     *  counterpart function was defined.
     */
    RTI_RecordingServiceStorageWriter_DeleteSubscriptionWriterFcn delete_subscription_writer;

    /*e @brief [Required] Implement the delete_instance function to delete
     *  a storage writer instance when \product is shutting down.
     */
    RTI_RecordingServiceStorageWriter_DeleteFcn delete_instance;

    /*e @brief A pointer for any data the plug-in might need.  Passed to the
     *  stream writer creation and deletion functions at runtime.
     */
    void *storage_writer_data;
};


#define RTI_RecordingServiceStorageWriter_initialize(storage_writer) \
{\
    (storage_writer)->create_stream_writer = NULL; \
    (storage_writer)->create_participant_writer = NULL; \
    (storage_writer)->create_publication_writer = NULL; \
    (storage_writer)->create_subscription_writer = NULL; \
    (storage_writer)->delete_stream_writer = NULL; \
    (storage_writer)->delete_participant_writer = NULL; \
    (storage_writer)->delete_publication_writer = NULL; \
    (storage_writer)->delete_subscription_writer = NULL; \
    (storage_writer)->delete_instance = NULL; \
    (storage_writer)->storage_writer_data = NULL; \
}


typedef struct RTI_RecordingServiceStorageWriter *
(*RTI_RecordingServiceStorageWriter_CreateFcn)(
        const struct RTI_RoutingServiceProperties *properties);


  #ifdef __cplusplus
    }   /* extern "C" */
  #endif

#endif /* recordingservice_storagewriter_h */
